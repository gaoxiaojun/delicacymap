// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_MapProtocol_2eproto__INCLUDED
#define PROTOBUF_MapProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>

namespace ProtocolBuffer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MapProtocol_2eproto();
void protobuf_AssignDesc_MapProtocol_2eproto();
void protobuf_ShutdownFile_MapProtocol_2eproto();

class Location;
class Area;
class Time;
class Comment;
class Currency;
class Error;
class User;
class Restaurant;
class RestaurantList;
class CommentList;
class RestaurantType;
class Query;

// ===================================================================

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();
  
  Location(const Location& from);
  
  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();
  void Swap(Location* other);
  
  // implements Message ----------------------------------------------
  
  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);
  
  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double latitude_;
  double longitude_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class Area : public ::google::protobuf::Message {
 public:
  Area();
  virtual ~Area();
  
  Area(const Area& from);
  
  inline Area& operator=(const Area& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Area& default_instance();
  void Swap(Area* other);
  
  // implements Message ----------------------------------------------
  
  Area* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Area& from);
  void MergeFrom(const Area& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ProtocolBuffer.Location northeast = 1;
  inline bool has_northeast() const;
  inline void clear_northeast();
  static const int kNortheastFieldNumber = 1;
  inline const ::ProtocolBuffer::Location& northeast() const;
  inline ::ProtocolBuffer::Location* mutable_northeast();
  
  // required .ProtocolBuffer.Location southwest = 2;
  inline bool has_southwest() const;
  inline void clear_southwest();
  static const int kSouthwestFieldNumber = 2;
  inline const ::ProtocolBuffer::Location& southwest() const;
  inline ::ProtocolBuffer::Location* mutable_southwest();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ProtocolBuffer::Location* northeast_;
  ::ProtocolBuffer::Location* southwest_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Area* default_instance_;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message {
 public:
  Time();
  virtual ~Time();
  
  Time(const Time& from);
  
  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();
  void Swap(Time* other);
  
  // implements Message ----------------------------------------------
  
  Time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string timeStamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 1;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Time* default_instance_;
};
// -------------------------------------------------------------------

class Comment : public ::google::protobuf::Message {
 public:
  Comment();
  virtual ~Comment();
  
  Comment(const Comment& from);
  
  inline Comment& operator=(const Comment& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Comment& default_instance();
  void Swap(Comment* other);
  
  // implements Message ----------------------------------------------
  
  Comment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Comment& from);
  void MergeFrom(const Comment& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  
  // required .ProtocolBuffer.Time timeStamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  inline const ::ProtocolBuffer::Time& timestamp() const;
  inline ::ProtocolBuffer::Time* mutable_timestamp();
  
  // required uint32 UID = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 RID = 4;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRIDFieldNumber = 4;
  inline ::google::protobuf::uint32 rid() const;
  inline void set_rid(::google::protobuf::uint32 value);
  
  // optional uint32 DID = 5;
  inline bool has_did() const;
  inline void clear_did();
  static const int kDIDFieldNumber = 5;
  inline ::google::protobuf::uint32 did() const;
  inline void set_did(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* content_;
  static const ::std::string _default_content_;
  ::ProtocolBuffer::Time* timestamp_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 rid_;
  ::google::protobuf::uint32 did_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Comment* default_instance_;
};
// -------------------------------------------------------------------

class Currency : public ::google::protobuf::Message {
 public:
  Currency();
  virtual ~Currency();
  
  Currency(const Currency& from);
  
  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Currency& default_instance();
  void Swap(Currency* other);
  
  // implements Message ----------------------------------------------
  
  Currency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Currency& from);
  void MergeFrom(const Currency& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double amount = 1;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 1;
  inline double amount() const;
  inline void set_amount(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double amount_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Currency* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();
  
  Error(const Error& from);
  
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();
  void Swap(Error* other);
  
  // implements Message ----------------------------------------------
  
  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();
  
  User(const User& from);
  
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();
  void Swap(User* other);
  
  // implements Message ----------------------------------------------
  
  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 UID = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required string uniqueName = 2;
  inline bool has_uniquename() const;
  inline void clear_uniquename();
  static const int kUniqueNameFieldNumber = 2;
  inline const ::std::string& uniquename() const;
  inline void set_uniquename(const ::std::string& value);
  inline void set_uniquename(const char* value);
  inline void set_uniquename(const char* value, size_t size);
  inline ::std::string* mutable_uniquename();
  
  // required .ProtocolBuffer.Time joinTime = 3;
  inline bool has_jointime() const;
  inline void clear_jointime();
  static const int kJoinTimeFieldNumber = 3;
  inline const ::ProtocolBuffer::Time& jointime() const;
  inline ::ProtocolBuffer::Time* mutable_jointime();
  
  // repeated .ProtocolBuffer.RestaurantType preferTypes = 4;
  inline int prefertypes_size() const;
  inline void clear_prefertypes();
  static const int kPreferTypesFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::RestaurantType >& prefertypes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::RestaurantType >* mutable_prefertypes();
  inline const ::ProtocolBuffer::RestaurantType& prefertypes(int index) const;
  inline ::ProtocolBuffer::RestaurantType* mutable_prefertypes(int index);
  inline ::ProtocolBuffer::RestaurantType* add_prefertypes();
  
  // repeated uint32 friends = 5;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 5;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& friends() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_friends();
  inline ::google::protobuf::uint32 friends(int index) const;
  inline void set_friends(int index, ::google::protobuf::uint32 value);
  inline void add_friends(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 uid_;
  ::std::string* uniquename_;
  static const ::std::string _default_uniquename_;
  ::ProtocolBuffer::Time* jointime_;
  ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::RestaurantType > prefertypes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > friends_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Restaurant : public ::google::protobuf::Message {
 public:
  Restaurant();
  virtual ~Restaurant();
  
  Restaurant(const Restaurant& from);
  
  inline Restaurant& operator=(const Restaurant& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Restaurant& default_instance();
  void Swap(Restaurant* other);
  
  // implements Message ----------------------------------------------
  
  Restaurant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Restaurant& from);
  void MergeFrom(const Restaurant& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ProtocolBuffer.Location location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::ProtocolBuffer::Location& location() const;
  inline ::ProtocolBuffer::Location* mutable_location();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required uint32 RID = 3;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRIDFieldNumber = 3;
  inline ::google::protobuf::uint32 rid() const;
  inline void set_rid(::google::protobuf::uint32 value);
  
  // required .ProtocolBuffer.RestaurantType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::ProtocolBuffer::RestaurantType& type() const;
  inline ::ProtocolBuffer::RestaurantType* mutable_type();
  
  // required uint32 Rating = 5;
  inline bool has_rating() const;
  inline void clear_rating();
  static const int kRatingFieldNumber = 5;
  inline ::google::protobuf::uint32 rating() const;
  inline void set_rating(::google::protobuf::uint32 value);
  
  // required .ProtocolBuffer.Currency averageExpense = 6;
  inline bool has_averageexpense() const;
  inline void clear_averageexpense();
  static const int kAverageExpenseFieldNumber = 6;
  inline const ::ProtocolBuffer::Currency& averageexpense() const;
  inline ::ProtocolBuffer::Currency* mutable_averageexpense();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ProtocolBuffer::Location* location_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::uint32 rid_;
  ::ProtocolBuffer::RestaurantType* type_;
  ::google::protobuf::uint32 rating_;
  ::ProtocolBuffer::Currency* averageexpense_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Restaurant* default_instance_;
};
// -------------------------------------------------------------------

class RestaurantList : public ::google::protobuf::Message {
 public:
  RestaurantList();
  virtual ~RestaurantList();
  
  RestaurantList(const RestaurantList& from);
  
  inline RestaurantList& operator=(const RestaurantList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RestaurantList& default_instance();
  void Swap(RestaurantList* other);
  
  // implements Message ----------------------------------------------
  
  RestaurantList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestaurantList& from);
  void MergeFrom(const RestaurantList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtocolBuffer.Restaurant restaurants = 1;
  inline int restaurants_size() const;
  inline void clear_restaurants();
  static const int kRestaurantsFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Restaurant >& restaurants() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Restaurant >* mutable_restaurants();
  inline const ::ProtocolBuffer::Restaurant& restaurants(int index) const;
  inline ::ProtocolBuffer::Restaurant* mutable_restaurants(int index);
  inline ::ProtocolBuffer::Restaurant* add_restaurants();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Restaurant > restaurants_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RestaurantList* default_instance_;
};
// -------------------------------------------------------------------

class CommentList : public ::google::protobuf::Message {
 public:
  CommentList();
  virtual ~CommentList();
  
  CommentList(const CommentList& from);
  
  inline CommentList& operator=(const CommentList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommentList& default_instance();
  void Swap(CommentList* other);
  
  // implements Message ----------------------------------------------
  
  CommentList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommentList& from);
  void MergeFrom(const CommentList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtocolBuffer.Comment comments = 1;
  inline int comments_size() const;
  inline void clear_comments();
  static const int kCommentsFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Comment >& comments() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Comment >* mutable_comments();
  inline const ::ProtocolBuffer::Comment& comments(int index) const;
  inline ::ProtocolBuffer::Comment* mutable_comments(int index);
  inline ::ProtocolBuffer::Comment* add_comments();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Comment > comments_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CommentList* default_instance_;
};
// -------------------------------------------------------------------

class RestaurantType : public ::google::protobuf::Message {
 public:
  RestaurantType();
  virtual ~RestaurantType();
  
  RestaurantType(const RestaurantType& from);
  
  inline RestaurantType& operator=(const RestaurantType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RestaurantType& default_instance();
  void Swap(RestaurantType* other);
  
  // implements Message ----------------------------------------------
  
  RestaurantType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestaurantType& from);
  void MergeFrom(const RestaurantType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 TID = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTIDFieldNumber = 1;
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 tid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RestaurantType* default_instance_;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message {
 public:
  Query();
  virtual ~Query();
  
  Query(const Query& from);
  
  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();
  void Swap(Query* other);
  
  // implements Message ----------------------------------------------
  
  Query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ProtocolBuffer.Area area = 1;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 1;
  inline const ::ProtocolBuffer::Area& area() const;
  inline ::ProtocolBuffer::Area* mutable_area();
  
  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional .ProtocolBuffer.Time time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::ProtocolBuffer::Time& time() const;
  inline ::ProtocolBuffer::Time* mutable_time();
  
  // optional uint32 RID = 4;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRIDFieldNumber = 4;
  inline ::google::protobuf::uint32 rid() const;
  inline void set_rid(::google::protobuf::uint32 value);
  
  // optional uint32 UID = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 5;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // optional uint32 n = 6;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 6;
  inline ::google::protobuf::uint32 n() const;
  inline void set_n(::google::protobuf::uint32 value);
  
  // optional string msg = 7;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 7;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  
  // optional bytes image = 8;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 8;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ProtocolBuffer::Area* area_;
  ::google::protobuf::uint32 level_;
  ::ProtocolBuffer::Time* time_;
  ::google::protobuf::uint32 rid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 n_;
  ::std::string* msg_;
  static const ::std::string _default_msg_;
  ::std::string* image_;
  static const ::std::string _default_image_;
  friend void  protobuf_AddDesc_MapProtocol_2eproto();
  friend void protobuf_AssignDesc_MapProtocol_2eproto();
  friend void protobuf_ShutdownFile_MapProtocol_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Query* default_instance_;
};
// ===================================================================

class DMService_Stub;

class DMService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DMService() {};
 public:
  virtual ~DMService();
  
  typedef DMService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void GetRestaurants(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::RestaurantList* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLastestCommentsOfRestaurant(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLastestCommentsByUser(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  virtual void GetCommentsOfUserSince(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  virtual void GetCommentsOfRestaurantSince(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  virtual void AddCommentForRestaurant(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::Comment* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DMService);
};

class DMService_Stub : public DMService {
 public:
  DMService_Stub(::google::protobuf::RpcChannel* channel);
  DMService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DMService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements DMService ------------------------------------------
  
  void GetRestaurants(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::RestaurantList* response,
                       ::google::protobuf::Closure* done);
  void GetLastestCommentsOfRestaurant(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  void GetLastestCommentsByUser(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  void GetCommentsOfUserSince(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  void GetCommentsOfRestaurantSince(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::CommentList* response,
                       ::google::protobuf::Closure* done);
  void AddCommentForRestaurant(::google::protobuf::RpcController* controller,
                       const ::ProtocolBuffer::Query* request,
                       ::ProtocolBuffer::Comment* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DMService_Stub);
};


// ===================================================================


// ===================================================================

// Location

// required double latitude = 1;
inline bool Location::has_latitude() const {
  return _has_bit(0);
}
inline void Location::clear_latitude() {
  latitude_ = 0;
  _clear_bit(0);
}
inline double Location::latitude() const {
  return latitude_;
}
inline void Location::set_latitude(double value) {
  _set_bit(0);
  latitude_ = value;
}

// required double longitude = 2;
inline bool Location::has_longitude() const {
  return _has_bit(1);
}
inline void Location::clear_longitude() {
  longitude_ = 0;
  _clear_bit(1);
}
inline double Location::longitude() const {
  return longitude_;
}
inline void Location::set_longitude(double value) {
  _set_bit(1);
  longitude_ = value;
}

// -------------------------------------------------------------------

// Area

// required .ProtocolBuffer.Location northeast = 1;
inline bool Area::has_northeast() const {
  return _has_bit(0);
}
inline void Area::clear_northeast() {
  if (northeast_ != NULL) northeast_->::ProtocolBuffer::Location::Clear();
  _clear_bit(0);
}
inline const ::ProtocolBuffer::Location& Area::northeast() const {
  return northeast_ != NULL ? *northeast_ : *default_instance_->northeast_;
}
inline ::ProtocolBuffer::Location* Area::mutable_northeast() {
  _set_bit(0);
  if (northeast_ == NULL) northeast_ = new ::ProtocolBuffer::Location;
  return northeast_;
}

// required .ProtocolBuffer.Location southwest = 2;
inline bool Area::has_southwest() const {
  return _has_bit(1);
}
inline void Area::clear_southwest() {
  if (southwest_ != NULL) southwest_->::ProtocolBuffer::Location::Clear();
  _clear_bit(1);
}
inline const ::ProtocolBuffer::Location& Area::southwest() const {
  return southwest_ != NULL ? *southwest_ : *default_instance_->southwest_;
}
inline ::ProtocolBuffer::Location* Area::mutable_southwest() {
  _set_bit(1);
  if (southwest_ == NULL) southwest_ = new ::ProtocolBuffer::Location;
  return southwest_;
}

// -------------------------------------------------------------------

// Time

// required string timeStamp = 1;
inline bool Time::has_timestamp() const {
  return _has_bit(0);
}
inline void Time::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Time::timestamp() const {
  return *timestamp_;
}
inline void Time::set_timestamp(const ::std::string& value) {
  _set_bit(0);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Time::set_timestamp(const char* value) {
  _set_bit(0);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Time::set_timestamp(const char* value, size_t size) {
  _set_bit(0);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Time::mutable_timestamp() {
  _set_bit(0);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// -------------------------------------------------------------------

// Comment

// required string content = 1;
inline bool Comment::has_content() const {
  return _has_bit(0);
}
inline void Comment::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Comment::content() const {
  return *content_;
}
inline void Comment::set_content(const ::std::string& value) {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Comment::set_content(const char* value) {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Comment::set_content(const char* value, size_t size) {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Comment::mutable_content() {
  _set_bit(0);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// required .ProtocolBuffer.Time timeStamp = 2;
inline bool Comment::has_timestamp() const {
  return _has_bit(1);
}
inline void Comment::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::ProtocolBuffer::Time::Clear();
  _clear_bit(1);
}
inline const ::ProtocolBuffer::Time& Comment::timestamp() const {
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::ProtocolBuffer::Time* Comment::mutable_timestamp() {
  _set_bit(1);
  if (timestamp_ == NULL) timestamp_ = new ::ProtocolBuffer::Time;
  return timestamp_;
}

// required uint32 UID = 3;
inline bool Comment::has_uid() const {
  return _has_bit(2);
}
inline void Comment::clear_uid() {
  uid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Comment::uid() const {
  return uid_;
}
inline void Comment::set_uid(::google::protobuf::uint32 value) {
  _set_bit(2);
  uid_ = value;
}

// required uint32 RID = 4;
inline bool Comment::has_rid() const {
  return _has_bit(3);
}
inline void Comment::clear_rid() {
  rid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Comment::rid() const {
  return rid_;
}
inline void Comment::set_rid(::google::protobuf::uint32 value) {
  _set_bit(3);
  rid_ = value;
}

// optional uint32 DID = 5;
inline bool Comment::has_did() const {
  return _has_bit(4);
}
inline void Comment::clear_did() {
  did_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Comment::did() const {
  return did_;
}
inline void Comment::set_did(::google::protobuf::uint32 value) {
  _set_bit(4);
  did_ = value;
}

// -------------------------------------------------------------------

// Currency

// required double amount = 1;
inline bool Currency::has_amount() const {
  return _has_bit(0);
}
inline void Currency::clear_amount() {
  amount_ = 0;
  _clear_bit(0);
}
inline double Currency::amount() const {
  return amount_;
}
inline void Currency::set_amount(double value) {
  _set_bit(0);
  amount_ = value;
}

// -------------------------------------------------------------------

// Error

// required string message = 1;
inline bool Error::has_message() const {
  return _has_bit(0);
}
inline void Error::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Error::message() const {
  return *message_;
}
inline void Error::set_message(const ::std::string& value) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Error::set_message(const char* value) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Error::set_message(const char* value, size_t size) {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Error::mutable_message() {
  _set_bit(0);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// User

// required uint32 UID = 1;
inline bool User::has_uid() const {
  return _has_bit(0);
}
inline void User::clear_uid() {
  uid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 User::uid() const {
  return uid_;
}
inline void User::set_uid(::google::protobuf::uint32 value) {
  _set_bit(0);
  uid_ = value;
}

// required string uniqueName = 2;
inline bool User::has_uniquename() const {
  return _has_bit(1);
}
inline void User::clear_uniquename() {
  if (uniquename_ != &_default_uniquename_) {
    uniquename_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& User::uniquename() const {
  return *uniquename_;
}
inline void User::set_uniquename(const ::std::string& value) {
  _set_bit(1);
  if (uniquename_ == &_default_uniquename_) {
    uniquename_ = new ::std::string;
  }
  uniquename_->assign(value);
}
inline void User::set_uniquename(const char* value) {
  _set_bit(1);
  if (uniquename_ == &_default_uniquename_) {
    uniquename_ = new ::std::string;
  }
  uniquename_->assign(value);
}
inline void User::set_uniquename(const char* value, size_t size) {
  _set_bit(1);
  if (uniquename_ == &_default_uniquename_) {
    uniquename_ = new ::std::string;
  }
  uniquename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_uniquename() {
  _set_bit(1);
  if (uniquename_ == &_default_uniquename_) {
    uniquename_ = new ::std::string;
  }
  return uniquename_;
}

// required .ProtocolBuffer.Time joinTime = 3;
inline bool User::has_jointime() const {
  return _has_bit(2);
}
inline void User::clear_jointime() {
  if (jointime_ != NULL) jointime_->::ProtocolBuffer::Time::Clear();
  _clear_bit(2);
}
inline const ::ProtocolBuffer::Time& User::jointime() const {
  return jointime_ != NULL ? *jointime_ : *default_instance_->jointime_;
}
inline ::ProtocolBuffer::Time* User::mutable_jointime() {
  _set_bit(2);
  if (jointime_ == NULL) jointime_ = new ::ProtocolBuffer::Time;
  return jointime_;
}

// repeated .ProtocolBuffer.RestaurantType preferTypes = 4;
inline int User::prefertypes_size() const {
  return prefertypes_.size();
}
inline void User::clear_prefertypes() {
  prefertypes_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::RestaurantType >&
User::prefertypes() const {
  return prefertypes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::RestaurantType >*
User::mutable_prefertypes() {
  return &prefertypes_;
}
inline const ::ProtocolBuffer::RestaurantType& User::prefertypes(int index) const {
  return prefertypes_.Get(index);
}
inline ::ProtocolBuffer::RestaurantType* User::mutable_prefertypes(int index) {
  return prefertypes_.Mutable(index);
}
inline ::ProtocolBuffer::RestaurantType* User::add_prefertypes() {
  return prefertypes_.Add();
}

// repeated uint32 friends = 5;
inline int User::friends_size() const {
  return friends_.size();
}
inline void User::clear_friends() {
  friends_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
User::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
User::mutable_friends() {
  return &friends_;
}
inline ::google::protobuf::uint32 User::friends(int index) const {
  return friends_.Get(index);
}
inline void User::set_friends(int index, ::google::protobuf::uint32 value) {
  friends_.Set(index, value);
}
inline void User::add_friends(::google::protobuf::uint32 value) {
  friends_.Add(value);
}

// -------------------------------------------------------------------

// Restaurant

// required .ProtocolBuffer.Location location = 1;
inline bool Restaurant::has_location() const {
  return _has_bit(0);
}
inline void Restaurant::clear_location() {
  if (location_ != NULL) location_->::ProtocolBuffer::Location::Clear();
  _clear_bit(0);
}
inline const ::ProtocolBuffer::Location& Restaurant::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::ProtocolBuffer::Location* Restaurant::mutable_location() {
  _set_bit(0);
  if (location_ == NULL) location_ = new ::ProtocolBuffer::Location;
  return location_;
}

// required string name = 2;
inline bool Restaurant::has_name() const {
  return _has_bit(1);
}
inline void Restaurant::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Restaurant::name() const {
  return *name_;
}
inline void Restaurant::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Restaurant::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Restaurant::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Restaurant::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required uint32 RID = 3;
inline bool Restaurant::has_rid() const {
  return _has_bit(2);
}
inline void Restaurant::clear_rid() {
  rid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 Restaurant::rid() const {
  return rid_;
}
inline void Restaurant::set_rid(::google::protobuf::uint32 value) {
  _set_bit(2);
  rid_ = value;
}

// required .ProtocolBuffer.RestaurantType type = 4;
inline bool Restaurant::has_type() const {
  return _has_bit(3);
}
inline void Restaurant::clear_type() {
  if (type_ != NULL) type_->::ProtocolBuffer::RestaurantType::Clear();
  _clear_bit(3);
}
inline const ::ProtocolBuffer::RestaurantType& Restaurant::type() const {
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::ProtocolBuffer::RestaurantType* Restaurant::mutable_type() {
  _set_bit(3);
  if (type_ == NULL) type_ = new ::ProtocolBuffer::RestaurantType;
  return type_;
}

// required uint32 Rating = 5;
inline bool Restaurant::has_rating() const {
  return _has_bit(4);
}
inline void Restaurant::clear_rating() {
  rating_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Restaurant::rating() const {
  return rating_;
}
inline void Restaurant::set_rating(::google::protobuf::uint32 value) {
  _set_bit(4);
  rating_ = value;
}

// required .ProtocolBuffer.Currency averageExpense = 6;
inline bool Restaurant::has_averageexpense() const {
  return _has_bit(5);
}
inline void Restaurant::clear_averageexpense() {
  if (averageexpense_ != NULL) averageexpense_->::ProtocolBuffer::Currency::Clear();
  _clear_bit(5);
}
inline const ::ProtocolBuffer::Currency& Restaurant::averageexpense() const {
  return averageexpense_ != NULL ? *averageexpense_ : *default_instance_->averageexpense_;
}
inline ::ProtocolBuffer::Currency* Restaurant::mutable_averageexpense() {
  _set_bit(5);
  if (averageexpense_ == NULL) averageexpense_ = new ::ProtocolBuffer::Currency;
  return averageexpense_;
}

// -------------------------------------------------------------------

// RestaurantList

// repeated .ProtocolBuffer.Restaurant restaurants = 1;
inline int RestaurantList::restaurants_size() const {
  return restaurants_.size();
}
inline void RestaurantList::clear_restaurants() {
  restaurants_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Restaurant >&
RestaurantList::restaurants() const {
  return restaurants_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Restaurant >*
RestaurantList::mutable_restaurants() {
  return &restaurants_;
}
inline const ::ProtocolBuffer::Restaurant& RestaurantList::restaurants(int index) const {
  return restaurants_.Get(index);
}
inline ::ProtocolBuffer::Restaurant* RestaurantList::mutable_restaurants(int index) {
  return restaurants_.Mutable(index);
}
inline ::ProtocolBuffer::Restaurant* RestaurantList::add_restaurants() {
  return restaurants_.Add();
}

// -------------------------------------------------------------------

// CommentList

// repeated .ProtocolBuffer.Comment comments = 1;
inline int CommentList::comments_size() const {
  return comments_.size();
}
inline void CommentList::clear_comments() {
  comments_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Comment >&
CommentList::comments() const {
  return comments_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtocolBuffer::Comment >*
CommentList::mutable_comments() {
  return &comments_;
}
inline const ::ProtocolBuffer::Comment& CommentList::comments(int index) const {
  return comments_.Get(index);
}
inline ::ProtocolBuffer::Comment* CommentList::mutable_comments(int index) {
  return comments_.Mutable(index);
}
inline ::ProtocolBuffer::Comment* CommentList::add_comments() {
  return comments_.Add();
}

// -------------------------------------------------------------------

// RestaurantType

// required uint32 TID = 1;
inline bool RestaurantType::has_tid() const {
  return _has_bit(0);
}
inline void RestaurantType::clear_tid() {
  tid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 RestaurantType::tid() const {
  return tid_;
}
inline void RestaurantType::set_tid(::google::protobuf::uint32 value) {
  _set_bit(0);
  tid_ = value;
}

// required string name = 2;
inline bool RestaurantType::has_name() const {
  return _has_bit(1);
}
inline void RestaurantType::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RestaurantType::name() const {
  return *name_;
}
inline void RestaurantType::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RestaurantType::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RestaurantType::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RestaurantType::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// Query

// optional .ProtocolBuffer.Area area = 1;
inline bool Query::has_area() const {
  return _has_bit(0);
}
inline void Query::clear_area() {
  if (area_ != NULL) area_->::ProtocolBuffer::Area::Clear();
  _clear_bit(0);
}
inline const ::ProtocolBuffer::Area& Query::area() const {
  return area_ != NULL ? *area_ : *default_instance_->area_;
}
inline ::ProtocolBuffer::Area* Query::mutable_area() {
  _set_bit(0);
  if (area_ == NULL) area_ = new ::ProtocolBuffer::Area;
  return area_;
}

// optional uint32 level = 2;
inline bool Query::has_level() const {
  return _has_bit(1);
}
inline void Query::clear_level() {
  level_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Query::level() const {
  return level_;
}
inline void Query::set_level(::google::protobuf::uint32 value) {
  _set_bit(1);
  level_ = value;
}

// optional .ProtocolBuffer.Time time = 3;
inline bool Query::has_time() const {
  return _has_bit(2);
}
inline void Query::clear_time() {
  if (time_ != NULL) time_->::ProtocolBuffer::Time::Clear();
  _clear_bit(2);
}
inline const ::ProtocolBuffer::Time& Query::time() const {
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::ProtocolBuffer::Time* Query::mutable_time() {
  _set_bit(2);
  if (time_ == NULL) time_ = new ::ProtocolBuffer::Time;
  return time_;
}

// optional uint32 RID = 4;
inline bool Query::has_rid() const {
  return _has_bit(3);
}
inline void Query::clear_rid() {
  rid_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Query::rid() const {
  return rid_;
}
inline void Query::set_rid(::google::protobuf::uint32 value) {
  _set_bit(3);
  rid_ = value;
}

// optional uint32 UID = 5;
inline bool Query::has_uid() const {
  return _has_bit(4);
}
inline void Query::clear_uid() {
  uid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 Query::uid() const {
  return uid_;
}
inline void Query::set_uid(::google::protobuf::uint32 value) {
  _set_bit(4);
  uid_ = value;
}

// optional uint32 n = 6;
inline bool Query::has_n() const {
  return _has_bit(5);
}
inline void Query::clear_n() {
  n_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 Query::n() const {
  return n_;
}
inline void Query::set_n(::google::protobuf::uint32 value) {
  _set_bit(5);
  n_ = value;
}

// optional string msg = 7;
inline bool Query::has_msg() const {
  return _has_bit(6);
}
inline void Query::clear_msg() {
  if (msg_ != &_default_msg_) {
    msg_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Query::msg() const {
  return *msg_;
}
inline void Query::set_msg(const ::std::string& value) {
  _set_bit(6);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Query::set_msg(const char* value) {
  _set_bit(6);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Query::set_msg(const char* value, size_t size) {
  _set_bit(6);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Query::mutable_msg() {
  _set_bit(6);
  if (msg_ == &_default_msg_) {
    msg_ = new ::std::string;
  }
  return msg_;
}

// optional bytes image = 8;
inline bool Query::has_image() const {
  return _has_bit(7);
}
inline void Query::clear_image() {
  if (image_ != &_default_image_) {
    image_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Query::image() const {
  return *image_;
}
inline void Query::set_image(const ::std::string& value) {
  _set_bit(7);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Query::set_image(const char* value) {
  _set_bit(7);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void Query::set_image(const void* value, size_t size) {
  _set_bit(7);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Query::mutable_image() {
  _set_bit(7);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  return image_;
}


}  // namespace ProtocolBuffer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_MapProtocol_2eproto__INCLUDED
